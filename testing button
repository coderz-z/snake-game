import pygame
from pygame.examples.headless_no_windows_needed import screen
from pygame.locals import *
import time
import random
import  sys

SIZE = 30
BACKGROUND_COLOR = (16, 112, 135)
menu_button = pygame.image.load("resources/main_menu_button .jpg")
display_width = pygame.display.set_mode((1020, 660))
snake = pygame.image.load("resources/block.jpg")
DISPLAY_W, DISPLAY_H = 1020, 660
button_surface = pygame.image.load("resources/main_menu_button .jpg")
button_surface = pygame.transform.scale(button_surface, (157, 55))
main_font = pygame.font.SysFont("arial", 30)

class Apple:
	def __init__(self, parent_screen):
		self.parent_screen = parent_screen
		self.image = pygame.image.load("resources/apple.jpg").convert()
		self.x = 120
		self.y = 120

	def draw(self):
		self.parent_screen.blit(self.image, (self.x, self.y))
		pygame.display.flip()

	def move(self):
		self.x = random.randint(0,33)*SIZE
		self.y = random.randint(0,21)*SIZE

class Snake:
	def __init__(self, parent_screen, length):
		self.parent_screen = parent_screen
		self.image = pygame.image.load("resources/block.jpg").convert()
		self.direction = 'down'

		self.length = length
		self.x = [30]*length
		self.y = [30]*length

	def move_left(self):
		self.direction = 'left'

	def move_right(self):
		self.direction = 'right'

	def move_up(self):
		self.direction = 'up'

	def move_down(self):
		self.direction = 'down'

	def walk(self):

		for i in range(self.length-1,0,-1):
			self.x[i] = self.x[i-1]
			self.y[i] = self.y[i-1]

		if self.direction == 'left':
			self.x[0] -= SIZE
		if self.direction == 'right':
			self.x[0] += SIZE
		if self.direction == 'up':
			self.y[0] -= SIZE
		if self.direction == 'down':
			self.y[0] += SIZE

		self.draw()

	def draw(self):
		for i in range(self.length):
			self.parent_screen.blit(self.image, (self.x[i], self.y[i]))
		pygame.display.flip()

	def increase_length(self):
		self.length += 1
		self.x.append(-1)
		self.y.append(-1)

class Game:
	def __init__(self, image, x_pos, y_pos, text_input):
		pygame.init()
		pygame.display.set_caption("slither.snap")
		pygame.mixer.init()
		self.image = image
		self.x_pos = x_pos
		self.y_pos = y_pos
		self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))
		self.text_input = text_input
		self.text = main_font.render(self.text_input, True, "white")
		self.text_rect = self.text.get_rect(center=(self.x_pos, self.y_pos))

		self.Backgroud_music()
		self.surface = pygame.display.set_mode((DISPLAY_W, DISPLAY_H))
		self.snake = Snake(self.surface, 1)
		self.snake.draw()
		self.apple = Apple(self.surface)
		self.apple.draw()

	def is_collision(self, x1, y1, x2, y2):
		if x1 >= x2 and x1 < x2 + SIZE:
			if y1 >= y2 and y1 < y2 + SIZE:
				return True
		return False

	def update(self):
		screen.blit(self.image, self.rect)
		screen.blit(self.text, self.text_rect)

	def checkForInput(self, position):
		if position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top,
																							self.rect.bottom):
			print("Button Press!")

	def changeColor(self, position):
		if position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top,
																							self.rect.bottom):
			self.text = main_font.render(self.text_input, True, "green")
		else:
			self.text = main_font.render(self.text_input, True, "white")



	def display_score(self):
		font = pygame.font.SysFont('arial',30)
		score = font.render(f"Score: {self.snake.length}",True,(200,200,200))
		self.surface.blit(score,(850,10))

	def render_background(self):
		bg = pygame.image.load("resources/background.png")
		self.surface.blit(bg, (0,0))

	def Backgroud_music(self):
		pygame.mixer.music.load("resources/background.mp3")
		pygame.mixer.music.play()

	def play(self):
		self.render_background()
		self.snake.walk()
		self.apple.draw()
		self.display_score()
		pygame.display.flip()

		if self.is_collision(self.snake.x[0], self.snake.y[0], self.apple.x, self.apple.y):
			sound = pygame.mixer.Sound("resources/Apple-bite.mp3")
			pygame.mixer.Sound.play(sound)
			self.snake.increase_length()
			self.apple.move()

		for i in range(2,self.snake.length):
			if self.is_collision(self.snake.x[0], self.snake.y[0], self.snake.x[i], self.snake.y[i]):
				sound = pygame.mixer.Sound("resources/rattlesnake3.mp3")
				pygame.mixer.Sound.play(sound)
				raise "Game over"

	def show_game_over(self):
		self.render_background()
		font = pygame.font.SysFont('arial', 30)
		line1 = font.render(f"Game over! your score was: {self.snake.length}",True,(25, 0, 0))
		self.surface.blit(line1, (200,300))

		button = Game(button_surface, 200, 340, "menu")

		line3 = font.render(f"Thanks for playing", True, (0, 255, 0))
		self.surface.blit(line3, (200,400))
		pygame.mixer.music.pause()

		pygame.display.flip()

	def reset(self):
		self.snake = Snake(self.surface, 1)
		self.apple = Apple(self.surface)

	def run(self):
		running = True
		pause = False
		while running:
			for event in pygame.event.get():
				if event.type == KEYDOWN:
					if event.key == K_ESCAPE:
						running = False

					if event.key == K_RETURN:
						pygame.mixer.music.unpause()
						pause = False

					if event.key == K_LEFT:
						self.snake.move_left()

					if event.key == K_RIGHT:
						self.snake.move_right()

					if event.key == K_UP:
						self.snake.move_up()

					if event.key == K_DOWN:
						self.snake.move_down()

					if snake > display_width:
						running = False

					if event.type == pygame.MOUSEBUTTONDOWN:
						game.checkForInput(pygame.mouse.get_pos())

						game.update()
						game.changeColor(pygame.mouse.get_pos())

				elif event.type == QUIT:
					running = False
			try:
				if not pause:
					self.play()
			except Exception as e:
				self.show_game_over()
				pause = True
				self.reset()

			time.sleep(.2)

if __name__ == '__main__':
	game = Game()
	game.run()
